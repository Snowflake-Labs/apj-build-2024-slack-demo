# Standard library imports
from typing import Any, Dict, List

# Third-party imports
import numpy as np
import pandas as pd

# Dict containing Slack Block Kit elements to prompt user for database and schema configuration:
#   - Input blocks for database and schema names with default values
#   - Instructions/descriptions for each input field
#   - Submit button to trigger setup process
# Example usage: client.views_open(trigger_id=trigger_id, view=db_schema_setup)
db_schema_setup: List[Dict[str, Any]] = [
    {
        "type": "section",
        "text": {
            "type": "mrkdwn",
            "text": "Please provide me with Database Name and Schema name to use with your demo setup:",
        },
    },
    {
        "type": "input",
        "block_id": "db_name_input_block",
        "element": {
            "type": "plain_text_input",
            "action_id": "db_name",
            "initial_value": "SLACK_DEMO",
            "placeholder": {"type": "plain_text", "text": "SLACK_DEMO"},
        },
        "label": {"type": "plain_text", "text": "Database"},
    },
    {
        "type": "input",
        "block_id": "schema_name_input_block",
        "element": {
            "type": "plain_text_input",
            "action_id": "schema_name",
            "initial_value": "DATA",
            "placeholder": {"type": "plain_text", "text": "DATA"},
        },
        "label": {"type": "plain_text", "text": "Schema"},
    },
    {
        "type": "actions",
        "block_id": "actions_block",
        "elements": [
            {
                "type": "button",
                "text": {"type": "plain_text", "text": "Submit"},
                "action_id": "setup_db",
            }
        ],
    },
]

# cortex_question: List of Slack block text area components that provides an input field
# for users to enter their analysis questions for Cortex Analyst, with a default initial value
cortex_question: List[Dict[str, Any]] = [
    {
        "type": "section",
        "text": {
            "type": "mrkdwn",
            "text": ":thinking_face: Got a question about support tickets?",
        },
    },
    {
        "type": "input",
        "block_id": "analyst_question_block",
        "element": {
            "type": "plain_text_input",
            "multiline": True,
            "action_id": "question",
        },
        "label": {"type": "plain_text", "text": "Your question:", "emoji": True},
    },
    {
        "type": "actions",
        "block_id": "cortex_actions_block",
        "elements": [
            {
                "type": "button",
                "text": {"type": "plain_text", "text": "Ask me!"},
                "action_id": "ask_cortex_analyst",
            }
        ],
    },
]


def create_sql_block(sql_query) -> List[Dict[str, Any]]:
    """
    Creates a Slack block message containing a text area to display the SQL query.

    Args:
        sql_query (str): The SQL query generated by Cortex Analyst.

    Returns:
        List[Dict[str, Any]]: Slack block components for a text area input containing the SQL query.
    """
    return [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "Query Generated by Cortex Analyst",
                "emoji": True,
            },
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"```\n{sql_query}\n```",
            },
        },
    ]


def create_df_block(df, title="Answer") -> List[Dict[str, Any]]:
    """
    Creates Slack block message components to display a pandas DataFrame as a markdown table.

    Args:
        df (pd.DataFrame): The DataFrame to be converted and displayed as a markdown table.
        title (str, optional): The title text to display above the table. Defaults to "Answer".

    Returns:
        List[Dict[str, Any]]: Slack block components containing the DataFrame formatted as a markdown table.
    """

    # Function to format a single value properly for display
    def format_value(val):
        if pd.isna(val):
            return "N/A"
        elif isinstance(val, (float, np.floating)):
            return f"{val:.2f}"
        return str(val)

    # Create markdown table header
    headers = df.columns.tolist()
    header_row = " | ".join([""] + headers + [""])
    separator_row = " | ".join([""] + ["-" * len(header) for header in headers] + [""])

    # Create table rows
    table_rows = []
    for _, row in df.head(10).iterrows():  # Limiting to 10 rows for Slack readability
        formatted_row = [format_value(val) for val in row]
        table_rows.append(" | ".join([""] + formatted_row + [""]))

    # Combine all rows
    markdown_table = "\n".join([header_row, separator_row] + table_rows)

    # Create the full table display with summary
    total_rows = len(df)
    shown_rows = min(10, total_rows)
    summary_text = (
        f"Showing {shown_rows} of {total_rows} rows"
        if total_rows > 10
        else f"Total rows: {total_rows}"
    )
    block = [
        {
            "type": "header",
            "text": {"type": "plain_text", "text": title, "emoji": True},
        },
        {
            "type": "section",
            "text": {"type": "mrkdwn", "text": f"```{markdown_table}```"},
        },
        {
            "type": "context",
            "elements": [{"type": "mrkdwn", "text": f"_{summary_text}_"}],
        },
    ]

    return block


def visualization_block(
    uploaded_file, title="Data Visualization Results"
) -> List[Dict[str, Any]]:
    """
    Creates Slack block message components to display uploaded visualization images.

    Args:
        uploaded_file (bytes): The visualization image file to be displayed in Slack.
        title (str, optional): The title text to display above the visualization.
            Defaults to "Data Visualization Results".

    Returns:
        List[Dict[str, Any]]: Slack block components containing the uploaded visualization image.
    """

    block = [
        {
            "type": "section",
            "text": {"type": "mrkdwn", "text": f"*{title}*"},
        },
        {
            "type": "image",
            "slack_file": {
                "url": uploaded_file["file"]["url_private"],
            },
            "alt_text": "graph",
        },
        {
            "type": "context",
            "elements": [{"type": "mrkdwn", "text": "Generated using Altair"}],
        },
    ]
    return block
